/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cs2263_hw03;

import com.google.common.collect.Maps;
import com.google.gson.Gson;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

import java.io.*;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * @author Victoria Weir
 * In this class, it is the UI interface and will show the departments and courses.
 */
public class App<Student> {
    //creating what is neccessary
    private Scene scene;
    private ChoiceBox<String> depts;
    private BorderPane mainLayout;
    ListView<Course> singleCourse;
    private Label newlabel;
    private String ids;
    private TextField textName;
    private Spinner<Integer> spinnum;
    private Spinner<Integer> spinnID;
    private Map<String, String> shown;
    List<Student> student;
    private String files = "src/main/resources/student.txt";

    /**
     * Creating a hashmap to store data
     */
    public App(){
        shown = Maps.newHashMap();
        shown.put("DisplayList", displayList());
        shown.put("CourseForm", showCourseForm());
        this.student = new ArrayList<>();
    }
    public List getStudent(){
        return student;
    }

    /**
     * Creating a start
     */
    public void initialStartUp(){
        Label welcome = new Label("Welcome to the Course List");
        welcome.setFont(Font.font("Arial", FontWeight.BOLD, 14));
        welcome.setTextAlignment(TextAlignment.CENTER);

        BorderPane start = new BorderPane();
        start.setCenter(welcome);
        BorderPane.setAlignment(welcome, Pos.CENTER);
    }

    /**
     *
     * @return seeing if it can display the list
     */
    public String displayList(){
        singleCourse = new ListView<>();
        Label cous = new Label("Courses");
        cous.setFont(Font.font("Arial", FontWeight.BOLD,14));
        cous.setTextAlignment(TextAlignment.CENTER);

        return null;
    }

    /**
     * prints the course form
     * @return course form
     */
    public String showCourseForm(){
        String printingForms = "";
        for(int i = 0; i< shown.size(); i++){
            printingForms += singleCourse.toString();
        }
        return printingForms;
    }

    /**
     * exits the program
     */
    public void exit(){
        Alert warn = new Alert(Alert.AlertType.CONFIRMATION);
        warn.setTitle("Confirmation");
        warn.setContentText("Do you want to exit?");

        Optional<ButtonType> result = warn.showAndWait();
        result.ifPresent(buttonType -> {
            if (buttonType.getButtonData().isDefaultButton())
                System.exit(0);
        });
    }

    /**
     * Creates the course
     */
    public void createCourse(){
        newlabel = new Label("");

        textName = new TextField();
        textName.setPromptText("Enter the Course Name: ");

        Label newname = new Label("Name: ");
        newname.setTextAlignment(TextAlignment.RIGHT);
        newname.setLabelFor(textName);

        spinnum = new Spinner<>(100,1000,100,1);
        spinnum.setEditable(true);

        Label newnum = new Label("Number: ");
        newnum.setTextAlignment(TextAlignment.RIGHT);
        newnum.setLabelFor(spinnum);

        spinnID = new Spinner<>(0,10,1,1);
        spinnID.setEditable(true);

        Label newcreds = new Label("Credits");
        newcreds.setTextAlignment(TextAlignment.RIGHT);
        newcreds.setLabelFor(spinnID);

        GridPane form = new GridPane();
        form.add(newname,0,0,1,1);
        form.add(newnum,0,1,1,1);
        form.add(newcreds,0,2,1,1);
        form.add(textName,1,0,3,1);
        form.add(spinnum,1,1,1,1);
        form.add(spinnID,1,2,1,1);

        form.setHgap(5);
        form.setVgap(5);

        Label tops = new Label("Create a new Course");
        VBox vtop = new VBox();
        vtop.getChildren().add(tops);
        vtop.getChildren().add(newlabel);
        vtop.setSpacing(5);

        Button addbutton = new Button("Add Course");
        addbutton.setOnAction(event -> {
            initialStartUp();
            Course together =  new Course(textName.getText(), ids, spinnum.getValue(), spinnID.getValue());

        });

        FlowPane fpButton = new FlowPane();
        fpButton.getChildren().add(addbutton);
        BorderPane connect = new BorderPane();
        connect.setCenter(form);
        connect.setTop(vtop);
        connect.setBottom(fpButton);
        connect.setPadding(new Insets(10));

    }


    /**
     *
     * @param primaryStage - this is from JavaFX repository which is an application that a scene can be set.
     * @throws Exception - Exception if something goes wrong
     *
     */
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("Course View");
        Button display = new Button("Display (dept.)");
        display.setOnAction(event -> {
            displayList();
        });

        Button newCourse = new Button("New Course");
        newCourse.setOnAction(event -> showCourseForm());

        Button exit = new Button("Exit");
        exit.setOnAction(event -> {
            exit();
        });

        depts = new ChoiceBox<>();
        depts.setOnAction(event -> {
            int select = depts.getSelectionModel().getSelectedIndex();
        });
        for(int i=0; i < Course.id.length; i++){
            depts.getItems().add(String.format("%s (%s)", Course.departments[i], Course.id[i]));
        }
        depts.getSelectionModel().select(0);

        mainLayout = new BorderPane();
        BorderPane extraSpacing = new BorderPane();
        extraSpacing.setPadding(new Insets(10));
        extraSpacing.setRight(exit);

        mainLayout.setBottom(extraSpacing);

        BorderPane choices = new BorderPane();
        choices.setPadding(new Insets(10));
        Label depart = new Label("Departments: ");
        choices.setLeft(depart);
        choices.setCenter(depts);
        BorderPane.setAlignment(depts, Pos.CENTER_LEFT);
        BorderPane.setAlignment(depart, Pos.CENTER_RIGHT);

        HBox buttons = new HBox(10,display,newCourse);
        HBox.setMargin(display, new Insets(10));
        HBox.setMargin(newCourse, new Insets(10));

        BorderPane topPart = new BorderPane();
        topPart.setCenter(choices);
        topPart.setRight(buttons);

        mainLayout.setTop(topPart);

        scene = new Scene(mainLayout, 600,300);
        primaryStage.setScene(scene);

        primaryStage.show();

    }
    //saves and loads
    public <student> void loadStudent(){
        try{
            File file = new File(files);
            BufferedReader read = new BufferedReader(new FileReader(file));
            Gson gson = new Gson();
            String students;
            while((students = read.readLine()) != null){
                student s = gson.fromJson(student, Student);
                students.add(s);
            }
        }catch(IOException e){
            System.out.println("There was a problem reading this file.");
        }

    }



    /**
     * Starts the program
     * @param args
     */
    public static void main(String[] args){
        Application.launch(args);
    }


}
